// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/habanero/v1/main.proto (package proto.habanero.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message proto.habanero.v1.Sensor
 */
export class Sensor extends Message<Sensor> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: string location = 4;
   */
  location = "";

  constructor(data?: PartialMessage<Sensor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.Sensor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensor {
    return new Sensor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensor {
    return new Sensor().fromJsonString(jsonString, options);
  }

  static equals(a: Sensor | PlainMessage<Sensor> | undefined, b: Sensor | PlainMessage<Sensor> | undefined): boolean {
    return proto3.util.equals(Sensor, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.SensorReading
 */
export class SensorReading extends Message<SensorReading> {
  /**
   * @generated from field: string sensor_id = 1;
   */
  sensorId = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: double moisture = 3;
   */
  moisture = 0;

  constructor(data?: PartialMessage<SensorReading>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.SensorReading";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "moisture", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SensorReading {
    return new SensorReading().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SensorReading {
    return new SensorReading().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SensorReading {
    return new SensorReading().fromJsonString(jsonString, options);
  }

  static equals(a: SensorReading | PlainMessage<SensorReading> | undefined, b: SensorReading | PlainMessage<SensorReading> | undefined): boolean {
    return proto3.util.equals(SensorReading, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetSensorReadingsRequest
 */
export class GetSensorReadingsRequest extends Message<GetSensorReadingsRequest> {
  /**
   * @generated from field: string sensor_id = 1;
   */
  sensorId = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  constructor(data?: PartialMessage<GetSensorReadingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetSensorReadingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorReadingsRequest {
    return new GetSensorReadingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorReadingsRequest {
    return new GetSensorReadingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorReadingsRequest {
    return new GetSensorReadingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorReadingsRequest | PlainMessage<GetSensorReadingsRequest> | undefined, b: GetSensorReadingsRequest | PlainMessage<GetSensorReadingsRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorReadingsRequest, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetSensorReadingsResponse
 */
export class GetSensorReadingsResponse extends Message<GetSensorReadingsResponse> {
  /**
   * @generated from field: repeated proto.habanero.v1.SensorReading readings = 1;
   */
  readings: SensorReading[] = [];

  constructor(data?: PartialMessage<GetSensorReadingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetSensorReadingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "readings", kind: "message", T: SensorReading, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorReadingsResponse {
    return new GetSensorReadingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorReadingsResponse {
    return new GetSensorReadingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorReadingsResponse {
    return new GetSensorReadingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorReadingsResponse | PlainMessage<GetSensorReadingsResponse> | undefined, b: GetSensorReadingsResponse | PlainMessage<GetSensorReadingsResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorReadingsResponse, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetSensorsRequest
 */
export class GetSensorsRequest extends Message<GetSensorsRequest> {
  constructor(data?: PartialMessage<GetSensorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetSensorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorsRequest | PlainMessage<GetSensorsRequest> | undefined, b: GetSensorsRequest | PlainMessage<GetSensorsRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorsRequest, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetSensorsResponse
 */
export class GetSensorsResponse extends Message<GetSensorsResponse> {
  /**
   * @generated from field: repeated proto.habanero.v1.Sensor sensors = 1;
   */
  sensors: Sensor[] = [];

  constructor(data?: PartialMessage<GetSensorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetSensorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorsResponse | PlainMessage<GetSensorsResponse> | undefined, b: GetSensorsResponse | PlainMessage<GetSensorsResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorsResponse, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetIndividualSensorReadingsRequest
 */
export class GetIndividualSensorReadingsRequest extends Message<GetIndividualSensorReadingsRequest> {
  /**
   * @generated from field: string sensor_id = 1;
   */
  sensorId = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 3;
   */
  end?: Timestamp;

  constructor(data?: PartialMessage<GetIndividualSensorReadingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetIndividualSensorReadingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndividualSensorReadingsRequest {
    return new GetIndividualSensorReadingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndividualSensorReadingsRequest {
    return new GetIndividualSensorReadingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndividualSensorReadingsRequest {
    return new GetIndividualSensorReadingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndividualSensorReadingsRequest | PlainMessage<GetIndividualSensorReadingsRequest> | undefined, b: GetIndividualSensorReadingsRequest | PlainMessage<GetIndividualSensorReadingsRequest> | undefined): boolean {
    return proto3.util.equals(GetIndividualSensorReadingsRequest, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.GetIndividualSensorReadingsResponse
 */
export class GetIndividualSensorReadingsResponse extends Message<GetIndividualSensorReadingsResponse> {
  /**
   * @generated from field: repeated proto.habanero.v1.SensorReading readings = 1;
   */
  readings: SensorReading[] = [];

  constructor(data?: PartialMessage<GetIndividualSensorReadingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.GetIndividualSensorReadingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "readings", kind: "message", T: SensorReading, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndividualSensorReadingsResponse {
    return new GetIndividualSensorReadingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndividualSensorReadingsResponse {
    return new GetIndividualSensorReadingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndividualSensorReadingsResponse {
    return new GetIndividualSensorReadingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndividualSensorReadingsResponse | PlainMessage<GetIndividualSensorReadingsResponse> | undefined, b: GetIndividualSensorReadingsResponse | PlainMessage<GetIndividualSensorReadingsResponse> | undefined): boolean {
    return proto3.util.equals(GetIndividualSensorReadingsResponse, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.ActivateWateringRequest
 */
export class ActivateWateringRequest extends Message<ActivateWateringRequest> {
  /**
   * @generated from field: string sensor_id = 1;
   */
  sensorId = "";

  /**
   * @generated from field: int64 duration_ms = 2;
   */
  durationMs = protoInt64.zero;

  constructor(data?: PartialMessage<ActivateWateringRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.ActivateWateringRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateWateringRequest {
    return new ActivateWateringRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateWateringRequest {
    return new ActivateWateringRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateWateringRequest {
    return new ActivateWateringRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateWateringRequest | PlainMessage<ActivateWateringRequest> | undefined, b: ActivateWateringRequest | PlainMessage<ActivateWateringRequest> | undefined): boolean {
    return proto3.util.equals(ActivateWateringRequest, a, b);
  }
}

/**
 * @generated from message proto.habanero.v1.ActivateWateringResponse
 */
export class ActivateWateringResponse extends Message<ActivateWateringResponse> {
  constructor(data?: PartialMessage<ActivateWateringResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.habanero.v1.ActivateWateringResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateWateringResponse {
    return new ActivateWateringResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateWateringResponse {
    return new ActivateWateringResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateWateringResponse {
    return new ActivateWateringResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateWateringResponse | PlainMessage<ActivateWateringResponse> | undefined, b: ActivateWateringResponse | PlainMessage<ActivateWateringResponse> | undefined): boolean {
    return proto3.util.equals(ActivateWateringResponse, a, b);
  }
}

