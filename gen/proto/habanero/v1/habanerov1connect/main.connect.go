// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/habanero/v1/main.proto

package habanerov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/parrotmac/habanero/gen/proto/habanero/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SensorServiceName is the fully-qualified name of the SensorService service.
	SensorServiceName = "proto.habanero.v1.SensorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorServiceGetSensorsProcedure is the fully-qualified name of the SensorService's GetSensors
	// RPC.
	SensorServiceGetSensorsProcedure = "/proto.habanero.v1.SensorService/GetSensors"
	// SensorServiceGetSensorReadingsProcedure is the fully-qualified name of the SensorService's
	// GetSensorReadings RPC.
	SensorServiceGetSensorReadingsProcedure = "/proto.habanero.v1.SensorService/GetSensorReadings"
	// SensorServiceGetIndividualSensorReadingsProcedure is the fully-qualified name of the
	// SensorService's GetIndividualSensorReadings RPC.
	SensorServiceGetIndividualSensorReadingsProcedure = "/proto.habanero.v1.SensorService/GetIndividualSensorReadings"
	// SensorServiceActivateWateringProcedure is the fully-qualified name of the SensorService's
	// ActivateWatering RPC.
	SensorServiceActivateWateringProcedure = "/proto.habanero.v1.SensorService/ActivateWatering"
)

// SensorServiceClient is a client for the proto.habanero.v1.SensorService service.
type SensorServiceClient interface {
	GetSensors(context.Context, *connect_go.Request[v1.GetSensorsRequest]) (*connect_go.Response[v1.GetSensorsResponse], error)
	GetSensorReadings(context.Context, *connect_go.Request[v1.GetSensorReadingsRequest]) (*connect_go.Response[v1.GetSensorReadingsResponse], error)
	GetIndividualSensorReadings(context.Context, *connect_go.Request[v1.GetIndividualSensorReadingsRequest]) (*connect_go.Response[v1.GetIndividualSensorReadingsResponse], error)
	ActivateWatering(context.Context, *connect_go.Request[v1.ActivateWateringRequest]) (*connect_go.Response[v1.ActivateWateringResponse], error)
}

// NewSensorServiceClient constructs a client for the proto.habanero.v1.SensorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SensorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sensorServiceClient{
		getSensors: connect_go.NewClient[v1.GetSensorsRequest, v1.GetSensorsResponse](
			httpClient,
			baseURL+SensorServiceGetSensorsProcedure,
			opts...,
		),
		getSensorReadings: connect_go.NewClient[v1.GetSensorReadingsRequest, v1.GetSensorReadingsResponse](
			httpClient,
			baseURL+SensorServiceGetSensorReadingsProcedure,
			opts...,
		),
		getIndividualSensorReadings: connect_go.NewClient[v1.GetIndividualSensorReadingsRequest, v1.GetIndividualSensorReadingsResponse](
			httpClient,
			baseURL+SensorServiceGetIndividualSensorReadingsProcedure,
			opts...,
		),
		activateWatering: connect_go.NewClient[v1.ActivateWateringRequest, v1.ActivateWateringResponse](
			httpClient,
			baseURL+SensorServiceActivateWateringProcedure,
			opts...,
		),
	}
}

// sensorServiceClient implements SensorServiceClient.
type sensorServiceClient struct {
	getSensors                  *connect_go.Client[v1.GetSensorsRequest, v1.GetSensorsResponse]
	getSensorReadings           *connect_go.Client[v1.GetSensorReadingsRequest, v1.GetSensorReadingsResponse]
	getIndividualSensorReadings *connect_go.Client[v1.GetIndividualSensorReadingsRequest, v1.GetIndividualSensorReadingsResponse]
	activateWatering            *connect_go.Client[v1.ActivateWateringRequest, v1.ActivateWateringResponse]
}

// GetSensors calls proto.habanero.v1.SensorService.GetSensors.
func (c *sensorServiceClient) GetSensors(ctx context.Context, req *connect_go.Request[v1.GetSensorsRequest]) (*connect_go.Response[v1.GetSensorsResponse], error) {
	return c.getSensors.CallUnary(ctx, req)
}

// GetSensorReadings calls proto.habanero.v1.SensorService.GetSensorReadings.
func (c *sensorServiceClient) GetSensorReadings(ctx context.Context, req *connect_go.Request[v1.GetSensorReadingsRequest]) (*connect_go.Response[v1.GetSensorReadingsResponse], error) {
	return c.getSensorReadings.CallUnary(ctx, req)
}

// GetIndividualSensorReadings calls proto.habanero.v1.SensorService.GetIndividualSensorReadings.
func (c *sensorServiceClient) GetIndividualSensorReadings(ctx context.Context, req *connect_go.Request[v1.GetIndividualSensorReadingsRequest]) (*connect_go.Response[v1.GetIndividualSensorReadingsResponse], error) {
	return c.getIndividualSensorReadings.CallUnary(ctx, req)
}

// ActivateWatering calls proto.habanero.v1.SensorService.ActivateWatering.
func (c *sensorServiceClient) ActivateWatering(ctx context.Context, req *connect_go.Request[v1.ActivateWateringRequest]) (*connect_go.Response[v1.ActivateWateringResponse], error) {
	return c.activateWatering.CallUnary(ctx, req)
}

// SensorServiceHandler is an implementation of the proto.habanero.v1.SensorService service.
type SensorServiceHandler interface {
	GetSensors(context.Context, *connect_go.Request[v1.GetSensorsRequest]) (*connect_go.Response[v1.GetSensorsResponse], error)
	GetSensorReadings(context.Context, *connect_go.Request[v1.GetSensorReadingsRequest]) (*connect_go.Response[v1.GetSensorReadingsResponse], error)
	GetIndividualSensorReadings(context.Context, *connect_go.Request[v1.GetIndividualSensorReadingsRequest]) (*connect_go.Response[v1.GetIndividualSensorReadingsResponse], error)
	ActivateWatering(context.Context, *connect_go.Request[v1.ActivateWateringRequest]) (*connect_go.Response[v1.ActivateWateringResponse], error)
}

// NewSensorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorServiceHandler(svc SensorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	sensorServiceGetSensorsHandler := connect_go.NewUnaryHandler(
		SensorServiceGetSensorsProcedure,
		svc.GetSensors,
		opts...,
	)
	sensorServiceGetSensorReadingsHandler := connect_go.NewUnaryHandler(
		SensorServiceGetSensorReadingsProcedure,
		svc.GetSensorReadings,
		opts...,
	)
	sensorServiceGetIndividualSensorReadingsHandler := connect_go.NewUnaryHandler(
		SensorServiceGetIndividualSensorReadingsProcedure,
		svc.GetIndividualSensorReadings,
		opts...,
	)
	sensorServiceActivateWateringHandler := connect_go.NewUnaryHandler(
		SensorServiceActivateWateringProcedure,
		svc.ActivateWatering,
		opts...,
	)
	return "/proto.habanero.v1.SensorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorServiceGetSensorsProcedure:
			sensorServiceGetSensorsHandler.ServeHTTP(w, r)
		case SensorServiceGetSensorReadingsProcedure:
			sensorServiceGetSensorReadingsHandler.ServeHTTP(w, r)
		case SensorServiceGetIndividualSensorReadingsProcedure:
			sensorServiceGetIndividualSensorReadingsHandler.ServeHTTP(w, r)
		case SensorServiceActivateWateringProcedure:
			sensorServiceActivateWateringHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorServiceHandler struct{}

func (UnimplementedSensorServiceHandler) GetSensors(context.Context, *connect_go.Request[v1.GetSensorsRequest]) (*connect_go.Response[v1.GetSensorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.habanero.v1.SensorService.GetSensors is not implemented"))
}

func (UnimplementedSensorServiceHandler) GetSensorReadings(context.Context, *connect_go.Request[v1.GetSensorReadingsRequest]) (*connect_go.Response[v1.GetSensorReadingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.habanero.v1.SensorService.GetSensorReadings is not implemented"))
}

func (UnimplementedSensorServiceHandler) GetIndividualSensorReadings(context.Context, *connect_go.Request[v1.GetIndividualSensorReadingsRequest]) (*connect_go.Response[v1.GetIndividualSensorReadingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.habanero.v1.SensorService.GetIndividualSensorReadings is not implemented"))
}

func (UnimplementedSensorServiceHandler) ActivateWatering(context.Context, *connect_go.Request[v1.ActivateWateringRequest]) (*connect_go.Response[v1.ActivateWateringResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.habanero.v1.SensorService.ActivateWatering is not implemented"))
}
