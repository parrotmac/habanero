// Code generated by pggen. DO NOT EDIT.

package models

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"time"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	HourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID) ([]HourlyMoistureAverageForSensorRow, error)
	// HourlyMoistureAverageForSensorBatch enqueues a HourlyMoistureAverageForSensor query into batch to be executed
	// later by the batch.
	HourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID)
	// HourlyMoistureAverageForSensorScan scans the result of an executed HourlyMoistureAverageForSensorBatch query.
	HourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]HourlyMoistureAverageForSensorRow, error)

	HourlyMoistureAverageForSensorAndDate(ctx context.Context, sensorID uuid.UUID, date time.Time) ([]HourlyMoistureAverageForSensorAndDateRow, error)
	// HourlyMoistureAverageForSensorAndDateBatch enqueues a HourlyMoistureAverageForSensorAndDate query into batch to be executed
	// later by the batch.
	HourlyMoistureAverageForSensorAndDateBatch(batch genericBatch, sensorID uuid.UUID, date time.Time)
	// HourlyMoistureAverageForSensorAndDateScan scans the result of an executed HourlyMoistureAverageForSensorAndDateBatch query.
	HourlyMoistureAverageForSensorAndDateScan(results pgx.BatchResults) ([]HourlyMoistureAverageForSensorAndDateRow, error)

	T24HourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID, date time.Time) ([]T24HourlyMoistureAverageForSensorRow, error)
	// T24HourlyMoistureAverageForSensorBatch enqueues a T24HourlyMoistureAverageForSensor query into batch to be executed
	// later by the batch.
	T24HourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID, date time.Time)
	// T24HourlyMoistureAverageForSensorScan scans the result of an executed T24HourlyMoistureAverageForSensorBatch query.
	T24HourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]T24HourlyMoistureAverageForSensorRow, error)

	T24FromNowHourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID) ([]T24FromNowHourlyMoistureAverageForSensorRow, error)
	// T24FromNowHourlyMoistureAverageForSensorBatch enqueues a T24FromNowHourlyMoistureAverageForSensor query into batch to be executed
	// later by the batch.
	T24FromNowHourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID)
	// T24FromNowHourlyMoistureAverageForSensorScan scans the result of an executed T24FromNowHourlyMoistureAverageForSensorBatch query.
	T24FromNowHourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]T24FromNowHourlyMoistureAverageForSensorRow, error)

	IndividualSensorReadingsInTimeRange(ctx context.Context, params IndividualSensorReadingsInTimeRangeParams) ([]IndividualSensorReadingsInTimeRangeRow, error)
	// IndividualSensorReadingsInTimeRangeBatch enqueues a IndividualSensorReadingsInTimeRange query into batch to be executed
	// later by the batch.
	IndividualSensorReadingsInTimeRangeBatch(batch genericBatch, params IndividualSensorReadingsInTimeRangeParams)
	// IndividualSensorReadingsInTimeRangeScan scans the result of an executed IndividualSensorReadingsInTimeRangeBatch query.
	IndividualSensorReadingsInTimeRangeScan(results pgx.BatchResults) ([]IndividualSensorReadingsInTimeRangeRow, error)

	ListSensors(ctx context.Context) ([]ListSensorsRow, error)
	// ListSensorsBatch enqueues a ListSensors query into batch to be executed
	// later by the batch.
	ListSensorsBatch(batch genericBatch)
	// ListSensorsScan scans the result of an executed ListSensorsBatch query.
	ListSensorsScan(results pgx.BatchResults) ([]ListSensorsRow, error)

	GetOrCreateSensor(ctx context.Context, params GetOrCreateSensorParams) (GetOrCreateSensorRow, error)
	// GetOrCreateSensorBatch enqueues a GetOrCreateSensor query into batch to be executed
	// later by the batch.
	GetOrCreateSensorBatch(batch genericBatch, params GetOrCreateSensorParams)
	// GetOrCreateSensorScan scans the result of an executed GetOrCreateSensorBatch query.
	GetOrCreateSensorScan(results pgx.BatchResults) (GetOrCreateSensorRow, error)

	GetSensor(ctx context.Context, id uuid.UUID) (GetSensorRow, error)
	// GetSensorBatch enqueues a GetSensor query into batch to be executed
	// later by the batch.
	GetSensorBatch(batch genericBatch, id uuid.UUID)
	// GetSensorScan scans the result of an executed GetSensorBatch query.
	GetSensorScan(results pgx.BatchResults) (GetSensorRow, error)

	InsertReading(ctx context.Context, params InsertReadingParams) (InsertReadingRow, error)
	// InsertReadingBatch enqueues a InsertReading query into batch to be executed
	// later by the batch.
	InsertReadingBatch(batch genericBatch, params InsertReadingParams)
	// InsertReadingScan scans the result of an executed InsertReadingBatch query.
	InsertReadingScan(results pgx.BatchResults) (InsertReadingRow, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, hourlyMoistureAverageForSensorSQL, hourlyMoistureAverageForSensorSQL); err != nil {
		return fmt.Errorf("prepare query 'HourlyMoistureAverageForSensor': %w", err)
	}
	if _, err := p.Prepare(ctx, hourlyMoistureAverageForSensorAndDateSQL, hourlyMoistureAverageForSensorAndDateSQL); err != nil {
		return fmt.Errorf("prepare query 'HourlyMoistureAverageForSensorAndDate': %w", err)
	}
	if _, err := p.Prepare(ctx, t24HourlyMoistureAverageForSensorSQL, t24HourlyMoistureAverageForSensorSQL); err != nil {
		return fmt.Errorf("prepare query 'T24HourlyMoistureAverageForSensor': %w", err)
	}
	if _, err := p.Prepare(ctx, t24FromNowHourlyMoistureAverageForSensorSQL, t24FromNowHourlyMoistureAverageForSensorSQL); err != nil {
		return fmt.Errorf("prepare query 'T24FromNowHourlyMoistureAverageForSensor': %w", err)
	}
	if _, err := p.Prepare(ctx, individualSensorReadingsInTimeRangeSQL, individualSensorReadingsInTimeRangeSQL); err != nil {
		return fmt.Errorf("prepare query 'IndividualSensorReadingsInTimeRange': %w", err)
	}
	if _, err := p.Prepare(ctx, listSensorsSQL, listSensorsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListSensors': %w", err)
	}
	if _, err := p.Prepare(ctx, getOrCreateSensorSQL, getOrCreateSensorSQL); err != nil {
		return fmt.Errorf("prepare query 'GetOrCreateSensor': %w", err)
	}
	if _, err := p.Prepare(ctx, getSensorSQL, getSensorSQL); err != nil {
		return fmt.Errorf("prepare query 'GetSensor': %w", err)
	}
	if _, err := p.Prepare(ctx, insertReadingSQL, insertReadingSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertReading': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const hourlyMoistureAverageForSensorSQL = `SELECT *
FROM hourly_moisture_avg_per_sensor
WHERE sensor_id = $1;`

type HourlyMoistureAverageForSensorRow struct {
	OneHourBucket   time.Time `json:"one_hour_bucket"`
	SensorID        uuid.UUID `json:"sensor_id"`
	AverageMoisture float64   `json:"average_moisture"`
}

// HourlyMoistureAverageForSensor implements Querier.HourlyMoistureAverageForSensor.
func (q *DBQuerier) HourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID) ([]HourlyMoistureAverageForSensorRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "HourlyMoistureAverageForSensor")
	rows, err := q.conn.Query(ctx, hourlyMoistureAverageForSensorSQL, sensorID)
	if err != nil {
		return nil, fmt.Errorf("query HourlyMoistureAverageForSensor: %w", err)
	}
	defer rows.Close()
	items := []HourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item HourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan HourlyMoistureAverageForSensor row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close HourlyMoistureAverageForSensor rows: %w", err)
	}
	return items, err
}

// HourlyMoistureAverageForSensorBatch implements Querier.HourlyMoistureAverageForSensorBatch.
func (q *DBQuerier) HourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID) {
	batch.Queue(hourlyMoistureAverageForSensorSQL, sensorID)
}

// HourlyMoistureAverageForSensorScan implements Querier.HourlyMoistureAverageForSensorScan.
func (q *DBQuerier) HourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]HourlyMoistureAverageForSensorRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query HourlyMoistureAverageForSensorBatch: %w", err)
	}
	defer rows.Close()
	items := []HourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item HourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan HourlyMoistureAverageForSensorBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close HourlyMoistureAverageForSensorBatch rows: %w", err)
	}
	return items, err
}

const hourlyMoistureAverageForSensorAndDateSQL = `SELECT *
FROM hourly_moisture_avg_per_sensor
WHERE sensor_id = $1
  AND one_hour_bucket >= $2
  AND one_hour_bucket < ($2 + ('1 day'::interval))::timestamp;`

type HourlyMoistureAverageForSensorAndDateRow struct {
	OneHourBucket   time.Time `json:"one_hour_bucket"`
	SensorID        uuid.UUID `json:"sensor_id"`
	AverageMoisture float64   `json:"average_moisture"`
}

// HourlyMoistureAverageForSensorAndDate implements Querier.HourlyMoistureAverageForSensorAndDate.
func (q *DBQuerier) HourlyMoistureAverageForSensorAndDate(ctx context.Context, sensorID uuid.UUID, date time.Time) ([]HourlyMoistureAverageForSensorAndDateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "HourlyMoistureAverageForSensorAndDate")
	rows, err := q.conn.Query(ctx, hourlyMoistureAverageForSensorAndDateSQL, sensorID, date)
	if err != nil {
		return nil, fmt.Errorf("query HourlyMoistureAverageForSensorAndDate: %w", err)
	}
	defer rows.Close()
	items := []HourlyMoistureAverageForSensorAndDateRow{}
	for rows.Next() {
		var item HourlyMoistureAverageForSensorAndDateRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan HourlyMoistureAverageForSensorAndDate row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close HourlyMoistureAverageForSensorAndDate rows: %w", err)
	}
	return items, err
}

// HourlyMoistureAverageForSensorAndDateBatch implements Querier.HourlyMoistureAverageForSensorAndDateBatch.
func (q *DBQuerier) HourlyMoistureAverageForSensorAndDateBatch(batch genericBatch, sensorID uuid.UUID, date time.Time) {
	batch.Queue(hourlyMoistureAverageForSensorAndDateSQL, sensorID, date)
}

// HourlyMoistureAverageForSensorAndDateScan implements Querier.HourlyMoistureAverageForSensorAndDateScan.
func (q *DBQuerier) HourlyMoistureAverageForSensorAndDateScan(results pgx.BatchResults) ([]HourlyMoistureAverageForSensorAndDateRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query HourlyMoistureAverageForSensorAndDateBatch: %w", err)
	}
	defer rows.Close()
	items := []HourlyMoistureAverageForSensorAndDateRow{}
	for rows.Next() {
		var item HourlyMoistureAverageForSensorAndDateRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan HourlyMoistureAverageForSensorAndDateBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close HourlyMoistureAverageForSensorAndDateBatch rows: %w", err)
	}
	return items, err
}

const t24HourlyMoistureAverageForSensorSQL = `SELECT *
FROM hourly_moisture_avg_per_sensor
WHERE sensor_id = $1
  AND one_hour_bucket >= ($2::timestamp - '24 hours'::interval)::timestamp
  AND one_hour_bucket < $2;`

type T24HourlyMoistureAverageForSensorRow struct {
	OneHourBucket   time.Time `json:"one_hour_bucket"`
	SensorID        uuid.UUID `json:"sensor_id"`
	AverageMoisture float64   `json:"average_moisture"`
}

// T24HourlyMoistureAverageForSensor implements Querier.T24HourlyMoistureAverageForSensor.
func (q *DBQuerier) T24HourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID, date time.Time) ([]T24HourlyMoistureAverageForSensorRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "T24HourlyMoistureAverageForSensor")
	rows, err := q.conn.Query(ctx, t24HourlyMoistureAverageForSensorSQL, sensorID, date)
	if err != nil {
		return nil, fmt.Errorf("query T24HourlyMoistureAverageForSensor: %w", err)
	}
	defer rows.Close()
	items := []T24HourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item T24HourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan T24HourlyMoistureAverageForSensor row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close T24HourlyMoistureAverageForSensor rows: %w", err)
	}
	return items, err
}

// T24HourlyMoistureAverageForSensorBatch implements Querier.T24HourlyMoistureAverageForSensorBatch.
func (q *DBQuerier) T24HourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID, date time.Time) {
	batch.Queue(t24HourlyMoistureAverageForSensorSQL, sensorID, date)
}

// T24HourlyMoistureAverageForSensorScan implements Querier.T24HourlyMoistureAverageForSensorScan.
func (q *DBQuerier) T24HourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]T24HourlyMoistureAverageForSensorRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query T24HourlyMoistureAverageForSensorBatch: %w", err)
	}
	defer rows.Close()
	items := []T24HourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item T24HourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan T24HourlyMoistureAverageForSensorBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close T24HourlyMoistureAverageForSensorBatch rows: %w", err)
	}
	return items, err
}

const t24FromNowHourlyMoistureAverageForSensorSQL = `SELECT *
FROM hourly_moisture_avg_per_sensor
WHERE sensor_id = $1
  AND one_hour_bucket >= (now() - '24 hours'::interval)::timestamp
  AND one_hour_bucket < now();`

type T24FromNowHourlyMoistureAverageForSensorRow struct {
	OneHourBucket   time.Time `json:"one_hour_bucket"`
	SensorID        uuid.UUID `json:"sensor_id"`
	AverageMoisture float64   `json:"average_moisture"`
}

// T24FromNowHourlyMoistureAverageForSensor implements Querier.T24FromNowHourlyMoistureAverageForSensor.
func (q *DBQuerier) T24FromNowHourlyMoistureAverageForSensor(ctx context.Context, sensorID uuid.UUID) ([]T24FromNowHourlyMoistureAverageForSensorRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "T24FromNowHourlyMoistureAverageForSensor")
	rows, err := q.conn.Query(ctx, t24FromNowHourlyMoistureAverageForSensorSQL, sensorID)
	if err != nil {
		return nil, fmt.Errorf("query T24FromNowHourlyMoistureAverageForSensor: %w", err)
	}
	defer rows.Close()
	items := []T24FromNowHourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item T24FromNowHourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan T24FromNowHourlyMoistureAverageForSensor row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close T24FromNowHourlyMoistureAverageForSensor rows: %w", err)
	}
	return items, err
}

// T24FromNowHourlyMoistureAverageForSensorBatch implements Querier.T24FromNowHourlyMoistureAverageForSensorBatch.
func (q *DBQuerier) T24FromNowHourlyMoistureAverageForSensorBatch(batch genericBatch, sensorID uuid.UUID) {
	batch.Queue(t24FromNowHourlyMoistureAverageForSensorSQL, sensorID)
}

// T24FromNowHourlyMoistureAverageForSensorScan implements Querier.T24FromNowHourlyMoistureAverageForSensorScan.
func (q *DBQuerier) T24FromNowHourlyMoistureAverageForSensorScan(results pgx.BatchResults) ([]T24FromNowHourlyMoistureAverageForSensorRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query T24FromNowHourlyMoistureAverageForSensorBatch: %w", err)
	}
	defer rows.Close()
	items := []T24FromNowHourlyMoistureAverageForSensorRow{}
	for rows.Next() {
		var item T24FromNowHourlyMoistureAverageForSensorRow
		if err := rows.Scan(&item.OneHourBucket, &item.SensorID, &item.AverageMoisture); err != nil {
			return nil, fmt.Errorf("scan T24FromNowHourlyMoistureAverageForSensorBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close T24FromNowHourlyMoistureAverageForSensorBatch rows: %w", err)
	}
	return items, err
}

const individualSensorReadingsInTimeRangeSQL = `SELECT *
FROM sensor_data
WHERE sensor_id = $1
  AND time >= $2
  AND time < $3;`

type IndividualSensorReadingsInTimeRangeParams struct {
	SensorID  uuid.UUID
	StartTime time.Time
	EndTime   time.Time
}

type IndividualSensorReadingsInTimeRangeRow struct {
	Time     time.Time `json:"time"`
	SensorID uuid.UUID `json:"sensor_id"`
	Moisture float64   `json:"moisture"`
}

// IndividualSensorReadingsInTimeRange implements Querier.IndividualSensorReadingsInTimeRange.
func (q *DBQuerier) IndividualSensorReadingsInTimeRange(ctx context.Context, params IndividualSensorReadingsInTimeRangeParams) ([]IndividualSensorReadingsInTimeRangeRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "IndividualSensorReadingsInTimeRange")
	rows, err := q.conn.Query(ctx, individualSensorReadingsInTimeRangeSQL, params.SensorID, params.StartTime, params.EndTime)
	if err != nil {
		return nil, fmt.Errorf("query IndividualSensorReadingsInTimeRange: %w", err)
	}
	defer rows.Close()
	items := []IndividualSensorReadingsInTimeRangeRow{}
	for rows.Next() {
		var item IndividualSensorReadingsInTimeRangeRow
		if err := rows.Scan(&item.Time, &item.SensorID, &item.Moisture); err != nil {
			return nil, fmt.Errorf("scan IndividualSensorReadingsInTimeRange row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close IndividualSensorReadingsInTimeRange rows: %w", err)
	}
	return items, err
}

// IndividualSensorReadingsInTimeRangeBatch implements Querier.IndividualSensorReadingsInTimeRangeBatch.
func (q *DBQuerier) IndividualSensorReadingsInTimeRangeBatch(batch genericBatch, params IndividualSensorReadingsInTimeRangeParams) {
	batch.Queue(individualSensorReadingsInTimeRangeSQL, params.SensorID, params.StartTime, params.EndTime)
}

// IndividualSensorReadingsInTimeRangeScan implements Querier.IndividualSensorReadingsInTimeRangeScan.
func (q *DBQuerier) IndividualSensorReadingsInTimeRangeScan(results pgx.BatchResults) ([]IndividualSensorReadingsInTimeRangeRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query IndividualSensorReadingsInTimeRangeBatch: %w", err)
	}
	defer rows.Close()
	items := []IndividualSensorReadingsInTimeRangeRow{}
	for rows.Next() {
		var item IndividualSensorReadingsInTimeRangeRow
		if err := rows.Scan(&item.Time, &item.SensorID, &item.Moisture); err != nil {
			return nil, fmt.Errorf("scan IndividualSensorReadingsInTimeRangeBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close IndividualSensorReadingsInTimeRangeBatch rows: %w", err)
	}
	return items, err
}

const listSensorsSQL = `SELECT *
FROM sensors;`

type ListSensorsRow struct {
	ID         uuid.UUID `json:"id"`
	Identifier string    `json:"identifier"`
	Type       string    `json:"type"`
	Location   string    `json:"location"`
}

// ListSensors implements Querier.ListSensors.
func (q *DBQuerier) ListSensors(ctx context.Context) ([]ListSensorsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListSensors")
	rows, err := q.conn.Query(ctx, listSensorsSQL)
	if err != nil {
		return nil, fmt.Errorf("query ListSensors: %w", err)
	}
	defer rows.Close()
	items := []ListSensorsRow{}
	for rows.Next() {
		var item ListSensorsRow
		if err := rows.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
			return nil, fmt.Errorf("scan ListSensors row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListSensors rows: %w", err)
	}
	return items, err
}

// ListSensorsBatch implements Querier.ListSensorsBatch.
func (q *DBQuerier) ListSensorsBatch(batch genericBatch) {
	batch.Queue(listSensorsSQL)
}

// ListSensorsScan implements Querier.ListSensorsScan.
func (q *DBQuerier) ListSensorsScan(results pgx.BatchResults) ([]ListSensorsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListSensorsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListSensorsRow{}
	for rows.Next() {
		var item ListSensorsRow
		if err := rows.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
			return nil, fmt.Errorf("scan ListSensorsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListSensorsBatch rows: %w", err)
	}
	return items, err
}

const getOrCreateSensorSQL = `INSERT INTO sensors (identifier, type, location)
VALUES ($1, $2, $3)
ON CONFLICT (identifier) DO UPDATE SET
                                       type = EXCLUDED.type,
                                       location = EXCLUDED.location
RETURNING *;`

type GetOrCreateSensorParams struct {
	Identifier string
	Type       string
	Location   string
}

type GetOrCreateSensorRow struct {
	ID         uuid.UUID `json:"id"`
	Identifier string    `json:"identifier"`
	Type       string    `json:"type"`
	Location   string    `json:"location"`
}

// GetOrCreateSensor implements Querier.GetOrCreateSensor.
func (q *DBQuerier) GetOrCreateSensor(ctx context.Context, params GetOrCreateSensorParams) (GetOrCreateSensorRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetOrCreateSensor")
	row := q.conn.QueryRow(ctx, getOrCreateSensorSQL, params.Identifier, params.Type, params.Location)
	var item GetOrCreateSensorRow
	if err := row.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
		return item, fmt.Errorf("query GetOrCreateSensor: %w", err)
	}
	return item, nil
}

// GetOrCreateSensorBatch implements Querier.GetOrCreateSensorBatch.
func (q *DBQuerier) GetOrCreateSensorBatch(batch genericBatch, params GetOrCreateSensorParams) {
	batch.Queue(getOrCreateSensorSQL, params.Identifier, params.Type, params.Location)
}

// GetOrCreateSensorScan implements Querier.GetOrCreateSensorScan.
func (q *DBQuerier) GetOrCreateSensorScan(results pgx.BatchResults) (GetOrCreateSensorRow, error) {
	row := results.QueryRow()
	var item GetOrCreateSensorRow
	if err := row.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
		return item, fmt.Errorf("scan GetOrCreateSensorBatch row: %w", err)
	}
	return item, nil
}

const getSensorSQL = `SELECT *
FROM sensors
WHERE id = $1;`

type GetSensorRow struct {
	ID         uuid.UUID `json:"id"`
	Identifier string    `json:"identifier"`
	Type       string    `json:"type"`
	Location   string    `json:"location"`
}

// GetSensor implements Querier.GetSensor.
func (q *DBQuerier) GetSensor(ctx context.Context, id uuid.UUID) (GetSensorRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetSensor")
	row := q.conn.QueryRow(ctx, getSensorSQL, id)
	var item GetSensorRow
	if err := row.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
		return item, fmt.Errorf("query GetSensor: %w", err)
	}
	return item, nil
}

// GetSensorBatch implements Querier.GetSensorBatch.
func (q *DBQuerier) GetSensorBatch(batch genericBatch, id uuid.UUID) {
	batch.Queue(getSensorSQL, id)
}

// GetSensorScan implements Querier.GetSensorScan.
func (q *DBQuerier) GetSensorScan(results pgx.BatchResults) (GetSensorRow, error) {
	row := results.QueryRow()
	var item GetSensorRow
	if err := row.Scan(&item.ID, &item.Identifier, &item.Type, &item.Location); err != nil {
		return item, fmt.Errorf("scan GetSensorBatch row: %w", err)
	}
	return item, nil
}

const insertReadingSQL = `INSERT INTO sensor_data (sensor_id, time, moisture)
VALUES ($1, $2, $3)
RETURNING *;`

type InsertReadingParams struct {
	SensorID uuid.UUID
	Time     time.Time
	Moisture float64
}

type InsertReadingRow struct {
	Time     time.Time `json:"time"`
	SensorID uuid.UUID `json:"sensor_id"`
	Moisture float64   `json:"moisture"`
}

// InsertReading implements Querier.InsertReading.
func (q *DBQuerier) InsertReading(ctx context.Context, params InsertReadingParams) (InsertReadingRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertReading")
	row := q.conn.QueryRow(ctx, insertReadingSQL, params.SensorID, params.Time, params.Moisture)
	var item InsertReadingRow
	if err := row.Scan(&item.Time, &item.SensorID, &item.Moisture); err != nil {
		return item, fmt.Errorf("query InsertReading: %w", err)
	}
	return item, nil
}

// InsertReadingBatch implements Querier.InsertReadingBatch.
func (q *DBQuerier) InsertReadingBatch(batch genericBatch, params InsertReadingParams) {
	batch.Queue(insertReadingSQL, params.SensorID, params.Time, params.Moisture)
}

// InsertReadingScan implements Querier.InsertReadingScan.
func (q *DBQuerier) InsertReadingScan(results pgx.BatchResults) (InsertReadingRow, error) {
	row := results.QueryRow()
	var item InsertReadingRow
	if err := row.Scan(&item.Time, &item.SensorID, &item.Moisture); err != nil {
		return item, fmt.Errorf("scan InsertReadingBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
